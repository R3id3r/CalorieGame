# Generated by Django 5.0.3 on 2024-04-10 04:14

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('variety', models.CharField(max_length=100)),
                ('planting_season', models.CharField(max_length=50)),
                ('harvest_time_minutes', models.CharField(max_length=50)),
                ('days_til_germination', models.PositiveIntegerField()),
                ('days_til_harvest', models.PositiveIntegerField()),
                ('days_til_seed', models.PositiveIntegerField()),
                ('weight_per_seed_grams', models.FloatField()),
                ('transplantable', models.BooleanField(default=False)),
                ('row_spacing_inches', models.FloatField()),
                ('plant_spacing_inches', models.FloatField()),
                ('produce_per_plant', models.PositiveIntegerField()),
                ('harvests_per_planting', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='FarmingSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('max_level', models.PositiveIntegerField(default=100, help_text='Max level available.')),
            ],
        ),
        migrations.CreateModel(
            name='Field',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(default='Empty', max_length=100)),
                ('bed_width_ft', models.FloatField(default='3.5')),
                ('bed_length_ft', models.FloatField(default=100)),
            ],
        ),
        migrations.CreateModel(
            name='PlayerSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField(default=1, help_text='Current skill level.')),
                ('xp', models.PositiveIntegerField(default=0, help_text='Total XP earned.')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CalorieApp.farmingskill')),
            ],
        ),
        migrations.CreateModel(
            name='Seed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('seed_count', models.PositiveIntegerField(default=100)),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seedCrop', to='CalorieApp.crop')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=100)),
                ('gold_balance', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('calorie_balance', models.PositiveIntegerField(default=0, help_text='Total calories in inventory?')),
                ('gems_balance', models.PositiveIntegerField(default=0, help_text='Used to buy time.')),
                ('score', models.IntegerField(default=0)),
                ('current_level', models.IntegerField(default=1)),
                ('earned_experience_points', models.IntegerField(default=0)),
                ('active', models.BooleanField(default=True)),
                ('farming_skills', models.ManyToManyField(blank=True, related_name='players', through='CalorieApp.PlayerSkill', to='CalorieApp.farmingskill')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='playerskill',
            name='player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Planting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('planting_date', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('rows_per_bed', models.FloatField(default=1)),
                ('plants_per_row', models.FloatField(default=1)),
                ('total_plants_per_bed', models.FloatField(default=1)),
                ('harvest_date', models.DateTimeField(auto_now_add=True)),
                ('seed_date', models.DateTimeField(auto_now_add=True)),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plantingField', to='CalorieApp.field')),
                ('seed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seeds', to='CalorieApp.seed')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plantingPlayer', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='field',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
